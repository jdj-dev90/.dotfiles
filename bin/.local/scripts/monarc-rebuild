
#!/usr/bin/env bash

# Define list of valid environments
valid_environments=("dev" "staging" "prod" "dev-staging" "dev-prod")

# Set default environment
# MONARC_DEV_ENV="dev"
	
session_name="rebuild"
tmux_running=$(pgrep tmux)

rebuild_path="travech-nx"

rebuild_cmd_apps="npm run compose:apps"
rebuild_cmd_services="npm run compose:services"

repo_path=($HOME"/code/work/monarc/app/")

nx_window_idx=2

declare -a repos=(
	"{\"name\": \"Apps\", \"path\": \"${repo_path}${rebuild_path}\", \"command\": \"${rebuild_cmd_apps}\"}"
	"{\"name\": \"Services\", \"path\": \"${repo_path}${rebuild_path}\", \"command\": \"${rebuild_cmd_services}\"}"
)

docker ps

# Attach if session exists
if tmux has-session -t $session_name 2>/dev/null; then
		tmux switch-client -t $session_name:1
		exit 0
fi

# something like this if bored
# st -g primary+0+1080x1920+0+0 -e sh -c "tmux new-session -s mysession; read" & disown

# Create session with dummy_window to remove later
# This is so we don't end up with an initial zsh window
if [[ -z $TMUX ]] && [[ -z $tmux_running ]]; then
	tmux -u new-session -d -s $session_name -c $repo_path -n dummy_window
	tmux kill-window -t $session_name:dummy_window
fi

if ! tmux has-session -t=$session_name 2> /dev/null; then
	tmux -u new-session -d -s $session_name -c $repo_path -n dummy_window
fi

for i in "${!repos[@]}"; do
	window_idx=$(($i + 1))
	repo=${repos[$i]}
	name=$(echo "${repo}" | jq ".name" | tr -d '"')
	path=$(echo "${repo}" | jq ".path" | tr -d '"')
	cmd=$(echo "${repo}" | jq ".command" | tr -d '"')

	cd $path

	if [ "$name" = "widget" ] || [ "$name" = "iframe_generator" ]; then
		tmux split-window -b -v -t $session_name:$nx_window_idx
		tmux send-keys -t ${session_name}:${nx_window_idx} "${cmd}" Enter 
	else
		tmux -u new-window -t $session_name:$window_idx -dn $name 
		tmux send-keys -t ${session_name}:${window_idx} "${cmd}" Enter 
	fi	
	done

tmux kill-window -t $session_name:dummy_window


tmux switch-client -t $session_name:1



	
